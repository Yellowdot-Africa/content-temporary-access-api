name: Deploy Content Temporary Access API

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Copy repo to server (includes dist/)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.DEPLOY_KEY_YD_TELECEL }}
          source: "."
          target: "/home/${{ secrets.SSH_USER }}/PROJECTS/content-temporary-access-api"

      - name: Configure and restart on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.DEPLOY_KEY_YD_TELECEL }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}/PROJECTS/content-temporary-access-api

            # Create .env from whichever secret you use
            echo "${{ secrets.ENV_FILE_CONTENTS }}" > .env
            if [ ! -s .env ]; then
              echo "${{ secrets.ENV_FILE }}" > .env
            fi

            # Install only prod deps
            npm ci --omit=dev

            # Ensure build artifact exists (built in CI and copied up)
            if [ ! -f dist/server.js ]; then
              echo "ERROR: dist/server.js not found. Make sure 'npm run build' ran before SCP."
              ls -la dist || true
              exit 1
            fi

            # Restart (or first start) with updated env
            if pm2 describe content-temporary-access-api > /dev/null 2>&1; then
              pm2 restart content-temporary-access-api --update-env
            else
              pm2 start dist/server.js --name content-temporary-access-api
            fi

            pm2 save
